// Code generated by Kitex v0.3.2. DO NOT EDIT.

package userservice

import (
	"context"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/simplified-tiktok/kitex_gen/userdemo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*userdemo.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Register":      kitex.NewMethodInfo(registerHandler, newUserServiceRegisterArgs, newUserServiceRegisterResult, false),
		"Login":         kitex.NewMethodInfo(loginHandler, newUserServiceLoginArgs, newUserServiceLoginResult, false),
		"GetUserById":   kitex.NewMethodInfo(getUserByIdHandler, newUserServiceGetUserByIdArgs, newUserServiceGetUserByIdResult, false),
		"Follow":        kitex.NewMethodInfo(followHandler, newUserServiceFollowArgs, newUserServiceFollowResult, false),
		"GetFollowList": kitex.NewMethodInfo(getFollowListHandler, newUserServiceGetFollowListArgs, newUserServiceGetFollowListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "userdemo",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.2",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userdemo.UserServiceRegisterArgs)
	realResult := result.(*userdemo.UserServiceRegisterResult)
	success, err := handler.(userdemo.UserService).Register(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceRegisterArgs() interface{} {
	return userdemo.NewUserServiceRegisterArgs()
}

func newUserServiceRegisterResult() interface{} {
	return userdemo.NewUserServiceRegisterResult()
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userdemo.UserServiceLoginArgs)
	realResult := result.(*userdemo.UserServiceLoginResult)
	success, err := handler.(userdemo.UserService).Login(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceLoginArgs() interface{} {
	return userdemo.NewUserServiceLoginArgs()
}

func newUserServiceLoginResult() interface{} {
	return userdemo.NewUserServiceLoginResult()
}

func getUserByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userdemo.UserServiceGetUserByIdArgs)
	realResult := result.(*userdemo.UserServiceGetUserByIdResult)
	success, err := handler.(userdemo.UserService).GetUserById(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetUserByIdArgs() interface{} {
	return userdemo.NewUserServiceGetUserByIdArgs()
}

func newUserServiceGetUserByIdResult() interface{} {
	return userdemo.NewUserServiceGetUserByIdResult()
}

func followHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userdemo.UserServiceFollowArgs)
	realResult := result.(*userdemo.UserServiceFollowResult)
	success, err := handler.(userdemo.UserService).Follow(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceFollowArgs() interface{} {
	return userdemo.NewUserServiceFollowArgs()
}

func newUserServiceFollowResult() interface{} {
	return userdemo.NewUserServiceFollowResult()
}

func getFollowListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userdemo.UserServiceGetFollowListArgs)
	realResult := result.(*userdemo.UserServiceGetFollowListResult)
	success, err := handler.(userdemo.UserService).GetFollowList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetFollowListArgs() interface{} {
	return userdemo.NewUserServiceGetFollowListArgs()
}

func newUserServiceGetFollowListResult() interface{} {
	return userdemo.NewUserServiceGetFollowListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Register(ctx context.Context, req *userdemo.RegisterRequest) (r *userdemo.RegisterResponse, err error) {
	var _args userdemo.UserServiceRegisterArgs
	_args.Req = req
	var _result userdemo.UserServiceRegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Login(ctx context.Context, req *userdemo.RegisterRequest) (r *userdemo.RegisterResponse, err error) {
	var _args userdemo.UserServiceLoginArgs
	_args.Req = req
	var _result userdemo.UserServiceLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserById(ctx context.Context, req *userdemo.GetUserRequest) (r *userdemo.GetUserResponse, err error) {
	var _args userdemo.UserServiceGetUserByIdArgs
	_args.Req = req
	var _result userdemo.UserServiceGetUserByIdResult
	if err = p.c.Call(ctx, "GetUserById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Follow(ctx context.Context, req *userdemo.FollowRequest) (r *userdemo.FollowResponse, err error) {
	var _args userdemo.UserServiceFollowArgs
	_args.Req = req
	var _result userdemo.UserServiceFollowResult
	if err = p.c.Call(ctx, "Follow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowList(ctx context.Context, req *userdemo.GetFollowListRequest) (r *userdemo.GetFollowListResponse, err error) {
	var _args userdemo.UserServiceGetFollowListArgs
	_args.Req = req
	var _result userdemo.UserServiceGetFollowListResult
	if err = p.c.Call(ctx, "GetFollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
