// Code generated by Kitex v0.3.2. DO NOT EDIT.

package videoservice

import (
	"context"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
	"github.com/cloudwego/simplified-tiktok/kitex_gen/videodemo"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	PublishVideo(ctx context.Context, req *videodemo.PublishRequest, callOptions ...callopt.Option) (r *videodemo.PublishResponse, err error)
	DeleteVideo(ctx context.Context, req *videodemo.DeleteVideoRequest, callOptions ...callopt.Option) (r *videodemo.DeleteVideoResponse, err error)
	GetVideoList(ctx context.Context, req *videodemo.GetVideoListRequst, callOptions ...callopt.Option) (r *videodemo.GetVideoListResponse, err error)
	GetUserPublished(ctx context.Context, req *videodemo.GetUserPublishedRequest, callOptions ...callopt.Option) (r *videodemo.GetUserPublishedResponse, err error)
	FavoriteVideo(ctx context.Context, req *videodemo.FavoriteVideoRequest, callOptions ...callopt.Option) (r *videodemo.FavoriteVideoResponse, err error)
	GetUserFavorite(ctx context.Context, req *videodemo.GetUserFavoriteRequest, callOptions ...callopt.Option) (r *videodemo.GetUserFavoriteResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kVideoServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kVideoServiceClient struct {
	*kClient
}

func (p *kVideoServiceClient) PublishVideo(ctx context.Context, req *videodemo.PublishRequest, callOptions ...callopt.Option) (r *videodemo.PublishResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PublishVideo(ctx, req)
}

func (p *kVideoServiceClient) DeleteVideo(ctx context.Context, req *videodemo.DeleteVideoRequest, callOptions ...callopt.Option) (r *videodemo.DeleteVideoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteVideo(ctx, req)
}

func (p *kVideoServiceClient) GetVideoList(ctx context.Context, req *videodemo.GetVideoListRequst, callOptions ...callopt.Option) (r *videodemo.GetVideoListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetVideoList(ctx, req)
}

func (p *kVideoServiceClient) GetUserPublished(ctx context.Context, req *videodemo.GetUserPublishedRequest, callOptions ...callopt.Option) (r *videodemo.GetUserPublishedResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserPublished(ctx, req)
}

func (p *kVideoServiceClient) FavoriteVideo(ctx context.Context, req *videodemo.FavoriteVideoRequest, callOptions ...callopt.Option) (r *videodemo.FavoriteVideoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FavoriteVideo(ctx, req)
}

func (p *kVideoServiceClient) GetUserFavorite(ctx context.Context, req *videodemo.GetUserFavoriteRequest, callOptions ...callopt.Option) (r *videodemo.GetUserFavoriteResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserFavorite(ctx, req)
}
