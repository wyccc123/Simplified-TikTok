// Code generated by Kitex v0.3.2. DO NOT EDIT.

package videoservice

import (
	"context"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/simplified-tiktok/kitex_gen/videodemo"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*videodemo.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"PublishVideo":     kitex.NewMethodInfo(publishVideoHandler, newVideoServicePublishVideoArgs, newVideoServicePublishVideoResult, false),
		"DeleteVideo":      kitex.NewMethodInfo(deleteVideoHandler, newVideoServiceDeleteVideoArgs, newVideoServiceDeleteVideoResult, false),
		"GetVideoList":     kitex.NewMethodInfo(getVideoListHandler, newVideoServiceGetVideoListArgs, newVideoServiceGetVideoListResult, false),
		"GetUserPublished": kitex.NewMethodInfo(getUserPublishedHandler, newVideoServiceGetUserPublishedArgs, newVideoServiceGetUserPublishedResult, false),
		"FavoriteVideo":    kitex.NewMethodInfo(favoriteVideoHandler, newVideoServiceFavoriteVideoArgs, newVideoServiceFavoriteVideoResult, false),
		"GetUserFavorite":  kitex.NewMethodInfo(getUserFavoriteHandler, newVideoServiceGetUserFavoriteArgs, newVideoServiceGetUserFavoriteResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "videodemo",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.2",
		Extra:           extra,
	}
	return svcInfo
}

func publishVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videodemo.VideoServicePublishVideoArgs)
	realResult := result.(*videodemo.VideoServicePublishVideoResult)
	success, err := handler.(videodemo.VideoService).PublishVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServicePublishVideoArgs() interface{} {
	return videodemo.NewVideoServicePublishVideoArgs()
}

func newVideoServicePublishVideoResult() interface{} {
	return videodemo.NewVideoServicePublishVideoResult()
}

func deleteVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videodemo.VideoServiceDeleteVideoArgs)
	realResult := result.(*videodemo.VideoServiceDeleteVideoResult)
	success, err := handler.(videodemo.VideoService).DeleteVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceDeleteVideoArgs() interface{} {
	return videodemo.NewVideoServiceDeleteVideoArgs()
}

func newVideoServiceDeleteVideoResult() interface{} {
	return videodemo.NewVideoServiceDeleteVideoResult()
}

func getVideoListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videodemo.VideoServiceGetVideoListArgs)
	realResult := result.(*videodemo.VideoServiceGetVideoListResult)
	success, err := handler.(videodemo.VideoService).GetVideoList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetVideoListArgs() interface{} {
	return videodemo.NewVideoServiceGetVideoListArgs()
}

func newVideoServiceGetVideoListResult() interface{} {
	return videodemo.NewVideoServiceGetVideoListResult()
}

func getUserPublishedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videodemo.VideoServiceGetUserPublishedArgs)
	realResult := result.(*videodemo.VideoServiceGetUserPublishedResult)
	success, err := handler.(videodemo.VideoService).GetUserPublished(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetUserPublishedArgs() interface{} {
	return videodemo.NewVideoServiceGetUserPublishedArgs()
}

func newVideoServiceGetUserPublishedResult() interface{} {
	return videodemo.NewVideoServiceGetUserPublishedResult()
}

func favoriteVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videodemo.VideoServiceFavoriteVideoArgs)
	realResult := result.(*videodemo.VideoServiceFavoriteVideoResult)
	success, err := handler.(videodemo.VideoService).FavoriteVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceFavoriteVideoArgs() interface{} {
	return videodemo.NewVideoServiceFavoriteVideoArgs()
}

func newVideoServiceFavoriteVideoResult() interface{} {
	return videodemo.NewVideoServiceFavoriteVideoResult()
}

func getUserFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videodemo.VideoServiceGetUserFavoriteArgs)
	realResult := result.(*videodemo.VideoServiceGetUserFavoriteResult)
	success, err := handler.(videodemo.VideoService).GetUserFavorite(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetUserFavoriteArgs() interface{} {
	return videodemo.NewVideoServiceGetUserFavoriteArgs()
}

func newVideoServiceGetUserFavoriteResult() interface{} {
	return videodemo.NewVideoServiceGetUserFavoriteResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) PublishVideo(ctx context.Context, req *videodemo.PublishRequest) (r *videodemo.PublishResponse, err error) {
	var _args videodemo.VideoServicePublishVideoArgs
	_args.Req = req
	var _result videodemo.VideoServicePublishVideoResult
	if err = p.c.Call(ctx, "PublishVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteVideo(ctx context.Context, req *videodemo.DeleteVideoRequest) (r *videodemo.DeleteVideoResponse, err error) {
	var _args videodemo.VideoServiceDeleteVideoArgs
	_args.Req = req
	var _result videodemo.VideoServiceDeleteVideoResult
	if err = p.c.Call(ctx, "DeleteVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoList(ctx context.Context, req *videodemo.GetVideoListRequst) (r *videodemo.GetVideoListResponse, err error) {
	var _args videodemo.VideoServiceGetVideoListArgs
	_args.Req = req
	var _result videodemo.VideoServiceGetVideoListResult
	if err = p.c.Call(ctx, "GetVideoList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserPublished(ctx context.Context, req *videodemo.GetUserPublishedRequest) (r *videodemo.GetUserPublishedResponse, err error) {
	var _args videodemo.VideoServiceGetUserPublishedArgs
	_args.Req = req
	var _result videodemo.VideoServiceGetUserPublishedResult
	if err = p.c.Call(ctx, "GetUserPublished", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteVideo(ctx context.Context, req *videodemo.FavoriteVideoRequest) (r *videodemo.FavoriteVideoResponse, err error) {
	var _args videodemo.VideoServiceFavoriteVideoArgs
	_args.Req = req
	var _result videodemo.VideoServiceFavoriteVideoResult
	if err = p.c.Call(ctx, "FavoriteVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserFavorite(ctx context.Context, req *videodemo.GetUserFavoriteRequest) (r *videodemo.GetUserFavoriteResponse, err error) {
	var _args videodemo.VideoServiceGetUserFavoriteArgs
	_args.Req = req
	var _result videodemo.VideoServiceGetUserFavoriteResult
	if err = p.c.Call(ctx, "GetUserFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
