// Code generated by Kitex v0.3.2. DO NOT EDIT.

package commentservice

import (
	"context"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/simplified-tiktok/kitex_gen/commentdemo"
)

func serviceInfo() *kitex.ServiceInfo {
	return commentServiceServiceInfo
}

var commentServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "CommentService"
	handlerType := (*commentdemo.CommentService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GiveComment":     kitex.NewMethodInfo(giveCommentHandler, newCommentServiceGiveCommentArgs, newCommentServiceGiveCommentResult, false),
		"DeleteComment":   kitex.NewMethodInfo(deleteCommentHandler, newCommentServiceDeleteCommentArgs, newCommentServiceDeleteCommentResult, false),
		"GetVideoComment": kitex.NewMethodInfo(getVideoCommentHandler, newCommentServiceGetVideoCommentArgs, newCommentServiceGetVideoCommentResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "commentdemo",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.2",
		Extra:           extra,
	}
	return svcInfo
}

func giveCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*commentdemo.CommentServiceGiveCommentArgs)
	realResult := result.(*commentdemo.CommentServiceGiveCommentResult)
	success, err := handler.(commentdemo.CommentService).GiveComment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentServiceGiveCommentArgs() interface{} {
	return commentdemo.NewCommentServiceGiveCommentArgs()
}

func newCommentServiceGiveCommentResult() interface{} {
	return commentdemo.NewCommentServiceGiveCommentResult()
}

func deleteCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*commentdemo.CommentServiceDeleteCommentArgs)
	realResult := result.(*commentdemo.CommentServiceDeleteCommentResult)
	success, err := handler.(commentdemo.CommentService).DeleteComment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentServiceDeleteCommentArgs() interface{} {
	return commentdemo.NewCommentServiceDeleteCommentArgs()
}

func newCommentServiceDeleteCommentResult() interface{} {
	return commentdemo.NewCommentServiceDeleteCommentResult()
}

func getVideoCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*commentdemo.CommentServiceGetVideoCommentArgs)
	realResult := result.(*commentdemo.CommentServiceGetVideoCommentResult)
	success, err := handler.(commentdemo.CommentService).GetVideoComment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentServiceGetVideoCommentArgs() interface{} {
	return commentdemo.NewCommentServiceGetVideoCommentArgs()
}

func newCommentServiceGetVideoCommentResult() interface{} {
	return commentdemo.NewCommentServiceGetVideoCommentResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GiveComment(ctx context.Context, req *commentdemo.GiveCommentRequest) (r *commentdemo.GiveCommentResponse, err error) {
	var _args commentdemo.CommentServiceGiveCommentArgs
	_args.Req = req
	var _result commentdemo.CommentServiceGiveCommentResult
	if err = p.c.Call(ctx, "GiveComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteComment(ctx context.Context, req *commentdemo.DeleteCommentRequest) (r *commentdemo.DeleteCommentResponse, err error) {
	var _args commentdemo.CommentServiceDeleteCommentArgs
	_args.Req = req
	var _result commentdemo.CommentServiceDeleteCommentResult
	if err = p.c.Call(ctx, "DeleteComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoComment(ctx context.Context, req *commentdemo.GetVideoCommentRequest) (r *commentdemo.GetVideoCommentResponse, err error) {
	var _args commentdemo.CommentServiceGetVideoCommentArgs
	_args.Req = req
	var _result commentdemo.CommentServiceGetVideoCommentResult
	if err = p.c.Call(ctx, "GetVideoComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
